{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8be98868",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Reinitialized existing Git repository in C:/Users/dorot/PycharmProjects/projekt_koncowy/.git/\n"
     ]
    }
   ],
   "source": [
    "!git init"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b6ce728f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "42d2ca12",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\dorot\\AppData\\Local\\Temp\\ipykernel_1336\\2876566474.py:1: DtypeWarning: Columns (7,8) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  data= pd.read_csv('C:/Users/dorot/PycharmProjects/projekt_koncowy/data/flights.csv',parse_dates=True)\n"
     ]
    }
   ],
   "source": [
    "data= pd.read_csv('C:/Users/dorot/PycharmProjects/projekt_koncowy/data/flights.csv',parse_dates=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "37652958",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['YEAR', 'MONTH', 'DAY', 'DAY_OF_WEEK', 'AIRLINE', 'FLIGHT_NUMBER',\n",
       "       'TAIL_NUMBER', 'ORIGIN_AIRPORT', 'DESTINATION_AIRPORT',\n",
       "       'SCHEDULED_DEPARTURE', 'DEPARTURE_TIME', 'DEPARTURE_DELAY', 'TAXI_OUT',\n",
       "       'WHEELS_OFF', 'SCHEDULED_TIME', 'ELAPSED_TIME', 'AIR_TIME', 'DISTANCE',\n",
       "       'WHEELS_ON', 'TAXI_IN', 'SCHEDULED_ARRIVAL', 'ARRIVAL_TIME',\n",
       "       'ARRIVAL_DELAY', 'DIVERTED', 'CANCELLED', 'CANCELLATION_REASON',\n",
       "       'AIR_SYSTEM_DELAY', 'SECURITY_DELAY', 'AIRLINE_DELAY',\n",
       "       'LATE_AIRCRAFT_DELAY', 'WEATHER_DELAY'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "da0d2c37",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5819079 entries, 0 to 5819078\n",
      "Data columns (total 31 columns):\n",
      " #   Column               Dtype  \n",
      "---  ------               -----  \n",
      " 0   YEAR                 int64  \n",
      " 1   MONTH                int64  \n",
      " 2   DAY                  int64  \n",
      " 3   DAY_OF_WEEK          int64  \n",
      " 4   AIRLINE              object \n",
      " 5   FLIGHT_NUMBER        int64  \n",
      " 6   TAIL_NUMBER          object \n",
      " 7   ORIGIN_AIRPORT       object \n",
      " 8   DESTINATION_AIRPORT  object \n",
      " 9   SCHEDULED_DEPARTURE  int64  \n",
      " 10  DEPARTURE_TIME       float64\n",
      " 11  DEPARTURE_DELAY      float64\n",
      " 12  TAXI_OUT             float64\n",
      " 13  WHEELS_OFF           float64\n",
      " 14  SCHEDULED_TIME       float64\n",
      " 15  ELAPSED_TIME         float64\n",
      " 16  AIR_TIME             float64\n",
      " 17  DISTANCE             int64  \n",
      " 18  WHEELS_ON            float64\n",
      " 19  TAXI_IN              float64\n",
      " 20  SCHEDULED_ARRIVAL    int64  \n",
      " 21  ARRIVAL_TIME         float64\n",
      " 22  ARRIVAL_DELAY        float64\n",
      " 23  DIVERTED             int64  \n",
      " 24  CANCELLED            int64  \n",
      " 25  CANCELLATION_REASON  object \n",
      " 26  AIR_SYSTEM_DELAY     float64\n",
      " 27  SECURITY_DELAY       float64\n",
      " 28  AIRLINE_DELAY        float64\n",
      " 29  LATE_AIRCRAFT_DELAY  float64\n",
      " 30  WEATHER_DELAY        float64\n",
      "dtypes: float64(16), int64(10), object(5)\n",
      "memory usage: 1.3+ GB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59d15a71",
   "metadata": {},
   "source": [
    "ARRIVAL_DELAY-Y-endogenous variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c478805e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5819079, 31)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e0dbfdd7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "YEAR have 0 NaN values\n",
      "MONTH have 0 NaN values\n",
      "DAY have 0 NaN values\n",
      "DAY_OF_WEEK have 0 NaN values\n",
      "AIRLINE have 0 NaN values\n",
      "FLIGHT_NUMBER have 0 NaN values\n",
      "TAIL_NUMBER have 14721 NaN values\n",
      "ORIGIN_AIRPORT have 0 NaN values\n",
      "DESTINATION_AIRPORT have 0 NaN values\n",
      "SCHEDULED_DEPARTURE have 0 NaN values\n",
      "DEPARTURE_TIME have 86153 NaN values\n",
      "DEPARTURE_DELAY have 86153 NaN values\n",
      "TAXI_OUT have 89047 NaN values\n",
      "WHEELS_OFF have 89047 NaN values\n",
      "SCHEDULED_TIME have 6 NaN values\n",
      "ELAPSED_TIME have 105071 NaN values\n",
      "AIR_TIME have 105071 NaN values\n",
      "DISTANCE have 0 NaN values\n",
      "WHEELS_ON have 92513 NaN values\n",
      "TAXI_IN have 92513 NaN values\n",
      "SCHEDULED_ARRIVAL have 0 NaN values\n",
      "ARRIVAL_TIME have 92513 NaN values\n",
      "ARRIVAL_DELAY have 105071 NaN values\n",
      "DIVERTED have 0 NaN values\n",
      "CANCELLED have 0 NaN values\n",
      "CANCELLATION_REASON have 5729195 NaN values\n",
      "AIR_SYSTEM_DELAY have 4755640 NaN values\n",
      "SECURITY_DELAY have 4755640 NaN values\n",
      "AIRLINE_DELAY have 4755640 NaN values\n",
      "LATE_AIRCRAFT_DELAY have 4755640 NaN values\n",
      "WEATHER_DELAY have 4755640 NaN values\n"
     ]
    }
   ],
   "source": [
    "for i in data.columns:\n",
    "    pd.isna(data[i])\n",
    "    print(f\"{i} have {data[i].isna().sum()} NaN values\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71d991bf",
   "metadata": {},
   "source": [
    "to remove: \n",
    "-CANCELLATION_REASON\n",
    "-AIR_SYSTEM_DELAY \n",
    "-SECURITY_DELAY \n",
    "-SECURITY_DELAY \n",
    "-AIRLINE_DELAY \n",
    "-LATE_AIRCRAFT_DELAY \n",
    "-WEATHER_DELAY\n",
    "\n",
    "because over 80 % of missing values\n",
    "\n",
    "-DESTINATION_AIRPORT \n",
    "-ORIGIN_AIRPORT \n",
    "-TAIL_NUMBER\n",
    "-DEPARTURE_TIME\n",
    "because categorical variable with more values (one hot encoding will create to much 0-1 variables)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "d65a567c",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_main=data.drop(columns=['CANCELLATION_REASON','AIR_SYSTEM_DELAY','SECURITY_DELAY','SECURITY_DELAY','AIRLINE_DELAY','LATE_AIRCRAFT_DELAY','WEATHER_DELAY','YEAR','MONTH','DAY','DESTINATION_AIRPORT','ORIGIN_AIRPORT','TAIL_NUMBER','DEPARTURE_TIME'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "2b2203fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5819079, 18)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_main.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "387b63d1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5819079 entries, 0 to 5819078\n",
      "Data columns (total 18 columns):\n",
      " #   Column               Dtype  \n",
      "---  ------               -----  \n",
      " 0   DAY_OF_WEEK          int64  \n",
      " 1   AIRLINE              object \n",
      " 2   FLIGHT_NUMBER        int64  \n",
      " 3   SCHEDULED_DEPARTURE  int64  \n",
      " 4   DEPARTURE_DELAY      float64\n",
      " 5   TAXI_OUT             float64\n",
      " 6   WHEELS_OFF           float64\n",
      " 7   SCHEDULED_TIME       float64\n",
      " 8   ELAPSED_TIME         float64\n",
      " 9   AIR_TIME             float64\n",
      " 10  DISTANCE             int64  \n",
      " 11  WHEELS_ON            float64\n",
      " 12  TAXI_IN              float64\n",
      " 13  SCHEDULED_ARRIVAL    int64  \n",
      " 14  ARRIVAL_TIME         float64\n",
      " 15  ARRIVAL_DELAY        float64\n",
      " 16  DIVERTED             int64  \n",
      " 17  CANCELLED            int64  \n",
      "dtypes: float64(10), int64(7), object(1)\n",
      "memory usage: 799.1+ MB\n"
     ]
    }
   ],
   "source": [
    "data_main.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "570d3fa5",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_main['SCHEDULED_ARRIVAL_CATEGORY'] = pd.cut(data_main['SCHEDULED_ARRIVAL'], bins=[0.0, 600.0, 1200.0, 1800.0, 2400.0], labels=['V', 'X', 'Y', 'Z'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "7b07dd7d",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_main['SCHEDULED_DEPARTURE_CATEGORY'] = pd.cut(data_main['SCHEDULED_DEPARTURE'], bins=[0.0, 600.0, 1200.0, 1800.0, 2400.0], labels=['V', 'X', 'Y', 'Z'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "34e9f875",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_main=data_main.drop(columns=['SCHEDULED_DEPARTURE', 'SCHEDULED_ARRIVAL'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "99ee6044",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DAY_OF_WEEK have 0 NaN values\n",
      "AIRLINE have 0 NaN values\n",
      "FLIGHT_NUMBER have 0 NaN values\n",
      "DEPARTURE_DELAY have 86153 NaN values\n",
      "TAXI_OUT have 89047 NaN values\n",
      "WHEELS_OFF have 89047 NaN values\n",
      "SCHEDULED_TIME have 6 NaN values\n",
      "ELAPSED_TIME have 105071 NaN values\n",
      "AIR_TIME have 105071 NaN values\n",
      "DISTANCE have 0 NaN values\n",
      "WHEELS_ON have 92513 NaN values\n",
      "TAXI_IN have 92513 NaN values\n",
      "ARRIVAL_TIME have 92513 NaN values\n",
      "ARRIVAL_DELAY have 105071 NaN values\n",
      "DIVERTED have 0 NaN values\n",
      "CANCELLED have 0 NaN values\n"
     ]
    }
   ],
   "source": [
    "for i in data_main.columns:\n",
    "    pd.isna(data_main[i])\n",
    "    print(f\"{i} have {data_main[i].isna().sum()} NaN values\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "884bf7a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "for col in data_main.columns:\n",
    "    if data_main[col].dtype != 'object' and data_main[col].dtype != 'category':\n",
    "        data_main[col].fillna(data_main[col].median(), inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "3dcc9071",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DAY_OF_WEEK have 0 NaN values\n",
      "AIRLINE have 0 NaN values\n",
      "FLIGHT_NUMBER have 0 NaN values\n",
      "DEPARTURE_DELAY have 0 NaN values\n",
      "TAXI_OUT have 0 NaN values\n",
      "WHEELS_OFF have 0 NaN values\n",
      "SCHEDULED_TIME have 0 NaN values\n",
      "ELAPSED_TIME have 0 NaN values\n",
      "AIR_TIME have 0 NaN values\n",
      "DISTANCE have 0 NaN values\n",
      "WHEELS_ON have 0 NaN values\n",
      "TAXI_IN have 0 NaN values\n",
      "ARRIVAL_TIME have 0 NaN values\n",
      "ARRIVAL_DELAY have 0 NaN values\n",
      "DIVERTED have 0 NaN values\n",
      "CANCELLED have 0 NaN values\n"
     ]
    }
   ],
   "source": [
    "for i in data_main.columns:\n",
    "    pd.isna(data_main[i])\n",
    "    print(f\"{i} have {data_main[i].isna().sum()} NaN values\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "82c9dd27",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5819079, 16)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_main.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "48333fb5",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_dummies = pd.get_dummies(data_main, drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "27e54df7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5819079, 28)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_dummies.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "efbfe30d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DAY_OF_WEEK have 0 NaN values\n",
      "AIRLINE have 0 NaN values\n",
      "FLIGHT_NUMBER have 0 NaN values\n",
      "DEPARTURE_DELAY have 0 NaN values\n",
      "TAXI_OUT have 0 NaN values\n",
      "WHEELS_OFF have 0 NaN values\n",
      "SCHEDULED_TIME have 0 NaN values\n",
      "ELAPSED_TIME have 0 NaN values\n",
      "AIR_TIME have 0 NaN values\n",
      "DISTANCE have 0 NaN values\n",
      "WHEELS_ON have 0 NaN values\n",
      "TAXI_IN have 0 NaN values\n",
      "ARRIVAL_TIME have 0 NaN values\n",
      "ARRIVAL_DELAY have 0 NaN values\n",
      "DIVERTED have 0 NaN values\n",
      "CANCELLED have 0 NaN values\n"
     ]
    }
   ],
   "source": [
    "for i in data_main.columns:\n",
    "    pd.isna(data_main[i])\n",
    "    print(f\"{i} have {data_main[i].isna().sum()} NaN values\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "bfc7380c",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_main_correl=data_main.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "e47ce10a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "sns.heatmap(data_main_correl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "dc9009f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "def corr_threshold(data_main_correl, threshold = 0.65):\n",
    "\n",
    "    mask = np.zeros_like(data_main_correl, dtype=bool)\n",
    "    mask[np.triu_indices_from(mask)] = True\n",
    "    data_main_correl[mask] = np.nan\n",
    "    data_main_correl = data_main_correl.stack()[data_main_correl.stack().abs() > threshold]\n",
    "    print(data_main_correl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "0b85d517",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ELAPSED_TIME   SCHEDULED_TIME     0.977791\n",
      "AIR_TIME       SCHEDULED_TIME     0.983207\n",
      "               ELAPSED_TIME       0.990043\n",
      "DISTANCE       SCHEDULED_TIME     0.984336\n",
      "               ELAPSED_TIME       0.966563\n",
      "               AIR_TIME           0.978396\n",
      "WHEELS_ON      WHEELS_OFF         0.695418\n",
      "ARRIVAL_TIME   WHEELS_OFF         0.667692\n",
      "               WHEELS_ON          0.968037\n",
      "ARRIVAL_DELAY  DEPARTURE_DELAY    0.937710\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "corr_threshold(data_main_correl, threshold = 0.65)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "a552ab16",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_df = data_dummies.drop(columns=['WHEELS_OFF', 'ELAPSED_TIME', 'SCHEDULED_TIME', 'WHEELS_ON', 'AIR_TIME'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "2640db78",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5819079, 23)"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "9dfcbaf3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DAY_OF_WEEK</th>\n",
       "      <th>FLIGHT_NUMBER</th>\n",
       "      <th>DEPARTURE_DELAY</th>\n",
       "      <th>TAXI_OUT</th>\n",
       "      <th>DISTANCE</th>\n",
       "      <th>TAXI_IN</th>\n",
       "      <th>ARRIVAL_TIME</th>\n",
       "      <th>ARRIVAL_DELAY</th>\n",
       "      <th>DIVERTED</th>\n",
       "      <th>CANCELLED</th>\n",
       "      <th>...</th>\n",
       "      <th>AIRLINE_EV</th>\n",
       "      <th>AIRLINE_F9</th>\n",
       "      <th>AIRLINE_HA</th>\n",
       "      <th>AIRLINE_MQ</th>\n",
       "      <th>AIRLINE_NK</th>\n",
       "      <th>AIRLINE_OO</th>\n",
       "      <th>AIRLINE_UA</th>\n",
       "      <th>AIRLINE_US</th>\n",
       "      <th>AIRLINE_VX</th>\n",
       "      <th>AIRLINE_WN</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5.819079e+06</td>\n",
       "      <td>5.819079e+06</td>\n",
       "      <td>5.819079e+06</td>\n",
       "      <td>5.819079e+06</td>\n",
       "      <td>5.819079e+06</td>\n",
       "      <td>5.819079e+06</td>\n",
       "      <td>5.819079e+06</td>\n",
       "      <td>5.819079e+06</td>\n",
       "      <td>5.819079e+06</td>\n",
       "      <td>5.819079e+06</td>\n",
       "      <td>...</td>\n",
       "      <td>5.819079e+06</td>\n",
       "      <td>5.819079e+06</td>\n",
       "      <td>5.819079e+06</td>\n",
       "      <td>5.819079e+06</td>\n",
       "      <td>5.819079e+06</td>\n",
       "      <td>5.819079e+06</td>\n",
       "      <td>5.819079e+06</td>\n",
       "      <td>5.819079e+06</td>\n",
       "      <td>5.819079e+06</td>\n",
       "      <td>5.819079e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>3.926941e+00</td>\n",
       "      <td>2.173093e+03</td>\n",
       "      <td>9.201820e+00</td>\n",
       "      <td>1.603996e+01</td>\n",
       "      <td>8.223565e+02</td>\n",
       "      <td>7.412157e+00</td>\n",
       "      <td>1.477056e+03</td>\n",
       "      <td>4.237201e+00</td>\n",
       "      <td>2.609863e-03</td>\n",
       "      <td>1.544643e-02</td>\n",
       "      <td>...</td>\n",
       "      <td>9.829339e-02</td>\n",
       "      <td>1.561003e-02</td>\n",
       "      <td>1.310723e-02</td>\n",
       "      <td>5.063207e-02</td>\n",
       "      <td>2.017141e-02</td>\n",
       "      <td>1.011076e-01</td>\n",
       "      <td>8.862622e-02</td>\n",
       "      <td>3.414887e-02</td>\n",
       "      <td>1.063794e-02</td>\n",
       "      <td>2.168479e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.988845e+00</td>\n",
       "      <td>1.757064e+03</td>\n",
       "      <td>3.683103e+01</td>\n",
       "      <td>8.830911e+00</td>\n",
       "      <td>6.077843e+02</td>\n",
       "      <td>5.596426e+00</td>\n",
       "      <td>5.221381e+02</td>\n",
       "      <td>3.893529e+01</td>\n",
       "      <td>5.102012e-02</td>\n",
       "      <td>1.233201e-01</td>\n",
       "      <td>...</td>\n",
       "      <td>2.977110e-01</td>\n",
       "      <td>1.239611e-01</td>\n",
       "      <td>1.137340e-01</td>\n",
       "      <td>2.192452e-01</td>\n",
       "      <td>1.405864e-01</td>\n",
       "      <td>3.014711e-01</td>\n",
       "      <td>2.842035e-01</td>\n",
       "      <td>1.816115e-01</td>\n",
       "      <td>1.025903e-01</td>\n",
       "      <td>4.120982e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>-8.200000e+01</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>2.100000e+01</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>-8.700000e+01</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.000000e+00</td>\n",
       "      <td>7.300000e+02</td>\n",
       "      <td>-5.000000e+00</td>\n",
       "      <td>1.100000e+01</td>\n",
       "      <td>3.730000e+02</td>\n",
       "      <td>4.000000e+00</td>\n",
       "      <td>1.103000e+03</td>\n",
       "      <td>-1.300000e+01</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>4.000000e+00</td>\n",
       "      <td>1.690000e+03</td>\n",
       "      <td>-2.000000e+00</td>\n",
       "      <td>1.400000e+01</td>\n",
       "      <td>6.470000e+02</td>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>1.512000e+03</td>\n",
       "      <td>-5.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>3.230000e+03</td>\n",
       "      <td>7.000000e+00</td>\n",
       "      <td>1.900000e+01</td>\n",
       "      <td>1.062000e+03</td>\n",
       "      <td>9.000000e+00</td>\n",
       "      <td>1.913000e+03</td>\n",
       "      <td>7.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>7.000000e+00</td>\n",
       "      <td>9.855000e+03</td>\n",
       "      <td>1.988000e+03</td>\n",
       "      <td>2.250000e+02</td>\n",
       "      <td>4.983000e+03</td>\n",
       "      <td>2.480000e+02</td>\n",
       "      <td>2.400000e+03</td>\n",
       "      <td>1.971000e+03</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        DAY_OF_WEEK  FLIGHT_NUMBER  DEPARTURE_DELAY      TAXI_OUT  \\\n",
       "count  5.819079e+06   5.819079e+06     5.819079e+06  5.819079e+06   \n",
       "mean   3.926941e+00   2.173093e+03     9.201820e+00  1.603996e+01   \n",
       "std    1.988845e+00   1.757064e+03     3.683103e+01  8.830911e+00   \n",
       "min    1.000000e+00   1.000000e+00    -8.200000e+01  1.000000e+00   \n",
       "25%    2.000000e+00   7.300000e+02    -5.000000e+00  1.100000e+01   \n",
       "50%    4.000000e+00   1.690000e+03    -2.000000e+00  1.400000e+01   \n",
       "75%    6.000000e+00   3.230000e+03     7.000000e+00  1.900000e+01   \n",
       "max    7.000000e+00   9.855000e+03     1.988000e+03  2.250000e+02   \n",
       "\n",
       "           DISTANCE       TAXI_IN  ARRIVAL_TIME  ARRIVAL_DELAY      DIVERTED  \\\n",
       "count  5.819079e+06  5.819079e+06  5.819079e+06   5.819079e+06  5.819079e+06   \n",
       "mean   8.223565e+02  7.412157e+00  1.477056e+03   4.237201e+00  2.609863e-03   \n",
       "std    6.077843e+02  5.596426e+00  5.221381e+02   3.893529e+01  5.102012e-02   \n",
       "min    2.100000e+01  1.000000e+00  1.000000e+00  -8.700000e+01  0.000000e+00   \n",
       "25%    3.730000e+02  4.000000e+00  1.103000e+03  -1.300000e+01  0.000000e+00   \n",
       "50%    6.470000e+02  6.000000e+00  1.512000e+03  -5.000000e+00  0.000000e+00   \n",
       "75%    1.062000e+03  9.000000e+00  1.913000e+03   7.000000e+00  0.000000e+00   \n",
       "max    4.983000e+03  2.480000e+02  2.400000e+03   1.971000e+03  1.000000e+00   \n",
       "\n",
       "          CANCELLED  ...    AIRLINE_EV    AIRLINE_F9    AIRLINE_HA  \\\n",
       "count  5.819079e+06  ...  5.819079e+06  5.819079e+06  5.819079e+06   \n",
       "mean   1.544643e-02  ...  9.829339e-02  1.561003e-02  1.310723e-02   \n",
       "std    1.233201e-01  ...  2.977110e-01  1.239611e-01  1.137340e-01   \n",
       "min    0.000000e+00  ...  0.000000e+00  0.000000e+00  0.000000e+00   \n",
       "25%    0.000000e+00  ...  0.000000e+00  0.000000e+00  0.000000e+00   \n",
       "50%    0.000000e+00  ...  0.000000e+00  0.000000e+00  0.000000e+00   \n",
       "75%    0.000000e+00  ...  0.000000e+00  0.000000e+00  0.000000e+00   \n",
       "max    1.000000e+00  ...  1.000000e+00  1.000000e+00  1.000000e+00   \n",
       "\n",
       "         AIRLINE_MQ    AIRLINE_NK    AIRLINE_OO    AIRLINE_UA    AIRLINE_US  \\\n",
       "count  5.819079e+06  5.819079e+06  5.819079e+06  5.819079e+06  5.819079e+06   \n",
       "mean   5.063207e-02  2.017141e-02  1.011076e-01  8.862622e-02  3.414887e-02   \n",
       "std    2.192452e-01  1.405864e-01  3.014711e-01  2.842035e-01  1.816115e-01   \n",
       "min    0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n",
       "25%    0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n",
       "50%    0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n",
       "75%    0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n",
       "max    1.000000e+00  1.000000e+00  1.000000e+00  1.000000e+00  1.000000e+00   \n",
       "\n",
       "         AIRLINE_VX    AIRLINE_WN  \n",
       "count  5.819079e+06  5.819079e+06  \n",
       "mean   1.063794e-02  2.168479e-01  \n",
       "std    1.025903e-01  4.120982e-01  \n",
       "min    0.000000e+00  0.000000e+00  \n",
       "25%    0.000000e+00  0.000000e+00  \n",
       "50%    0.000000e+00  0.000000e+00  \n",
       "75%    0.000000e+00  0.000000e+00  \n",
       "max    1.000000e+00  1.000000e+00  \n",
       "\n",
       "[8 rows x 23 columns]"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "7c3b1f40",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X = data_df.drop(\"ARRIVAL_DELAY\", axis=1)  # zmienne niezależne (features)\n",
    "y = data_df[\"ARRIVAL_DELAY\"]  # zmienna zależna (target)\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.2, random_state=42\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "9b9ec1ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4655263, 22)"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "3c1ab1cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4655263,)"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "c0d28ad9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1163816, 22)"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "04180aef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1163816,)"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "dbddd43e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Współczynnik regresji: [-4.05296370e-02 -9.35724427e-05  9.81303779e-01  8.45353657e-01\n",
      " -3.91912999e-03  8.09179195e-01  1.27211701e-05 -2.87454369e+01\n",
      "  1.61418450e+00  7.28881221e+00  2.79103545e+00 -1.04949472e+00\n",
      "  3.16677998e+00  5.76757179e+00  1.23854319e+01  4.91005687e-01\n",
      "  5.80955286e+00  2.86383033e+00 -1.97195581e+00  2.38823286e+00\n",
      "  5.52896906e+00  5.16482969e+00]\n",
      "Wyraz wolny: -23.00056825671821\n"
     ]
    }
   ],
   "source": [
    "# Scikit Learn module\n",
    "from sklearn.linear_model import LinearRegression\n",
    "import numpy as np\n",
    "import sklearn.metrics as metrics\n",
    "\n",
    "lin_reg = LinearRegression()\n",
    "lin_reg.fit(X_train, y_train)\n",
    "print(f\"Współczynnik regresji: {lin_reg.coef_}\")\n",
    "print(f\"Wyraz wolny: {lin_reg.intercept_}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "29f30530",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sklearn.metrics as metrics\n",
    "\n",
    "def regression_results(y_true, y_pred):\n",
    "    # Regression metrics\n",
    "    explained_variance = metrics.explained_variance_score(y_true, y_pred)\n",
    "    mean_absolute_error = metrics.mean_absolute_error(y_true, y_pred)\n",
    "    mse = metrics.mean_squared_error(y_true, y_pred)\n",
    "    # mean_squared_log_error = metrics.mean_squared_log_error(y_true, y_pred)\n",
    "    median_absolute_error = metrics.median_absolute_error(y_true, y_pred)\n",
    "    r2 = metrics.r2_score(y_true, y_pred)\n",
    "\n",
    "    print(\"explained_variance: \", round(explained_variance, 4))\n",
    "    # print(\"mean_squared_log_error: \", round(mean_squared_log_error, 4))\n",
    "    print(\"r2: \", round(r2, 4))\n",
    "    print(\"MAE: \", round(mean_absolute_error, 4))\n",
    "    print(\"MSE: \", round(mse, 4))\n",
    "    print(\"RMSE: \", round(np.sqrt(mse), 4))\n",
    "\n",
    "\n",
    "y_train_pred = lin_reg.predict(X_train)\n",
    "y_test_pred = lin_reg.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "6841b505",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "explained_variance:  0.9306\n",
      "r2:  0.9306\n",
      "MAE:  6.924\n",
      "MSE:  104.9936\n",
      "RMSE:  10.2466\n"
     ]
    }
   ],
   "source": [
    "regression_results(y_train,y_train_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "6479a5c8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "explained_variance:  0.9326\n",
      "r2:  0.9326\n",
      "MAE:  6.9155\n",
      "MSE:  103.0432\n",
      "RMSE:  10.151\n"
     ]
    }
   ],
   "source": [
    "regression_results(y_test, y_test_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e405dbe9",
   "metadata": {},
   "source": [
    "the model of linear regression seems not to be overfitted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "354cdfd2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-87.0"
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "6c4d335f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1971.0"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "id": "e7b4728b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-15.138303280605752"
      ]
     },
     "execution_count": 193,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train_pred.min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "id": "d7f08bdb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1140.5783714688257"
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train_pred.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "fb970494",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-15.138303280605752"
      ]
     },
     "execution_count": 189,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test_pred.min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "id": "9b4c5cf7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-82.0"
      ]
     },
     "execution_count": 184,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test.min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "id": "ebc39ba6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1665.0"
      ]
     },
     "execution_count": 186,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "64593cbb",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\dorot\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n",
      "C:\\Users\\dorot\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\seaborn\\distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Test dla normalości reszt (residuals): \\n Residual eror')"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "# Check for Linearity\n",
    "f = plt.figure(figsize=(14, 5))\n",
    "ax = f.add_subplot(121)\n",
    "sns.scatterplot(y_test, y_test_pred, ax=ax, color=\"r\")\n",
    "ax.set_title(\"Test liniowej zależności:\\n Actual Vs Predicted value\")\n",
    "\n",
    "# Check for Residual normality & mean\n",
    "ax = f.add_subplot(122)\n",
    "sns.distplot((y_test - y_test_pred), ax=ax, color=\"b\")\n",
    "ax.axvline((y_test - y_test_pred).mean(), color=\"k\", linestyle=\"--\")\n",
    "ax.set_title(\"Test dla normalości reszt (residuals): \\n Residual eror\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "9f10c2e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "56d74ad6",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\dorot\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\sklearn\\ensemble\\_forest.py:400: FutureWarning: Criterion 'mse' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='squared_error'` which is equivalent.\n",
      "  warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-7 {color: black;background-color: white;}#sk-container-id-7 pre{padding: 0;}#sk-container-id-7 div.sk-toggleable {background-color: white;}#sk-container-id-7 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-7 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-7 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-7 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-7 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-7 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-7 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-7 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-7 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-7 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-7 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-7 div.sk-item {position: relative;z-index: 1;}#sk-container-id-7 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-7 div.sk-item::before, #sk-container-id-7 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-7 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-7 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-7 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-7 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-7 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-7 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-7 div.sk-label-container {text-align: center;}#sk-container-id-7 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-7 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-7\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(criterion=&#x27;mse&#x27;, max_depth=8, min_samples_leaf=10,\n",
       "                      n_estimators=30, random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" checked><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(criterion=&#x27;mse&#x27;, max_depth=8, min_samples_leaf=10,\n",
       "                      n_estimators=30, random_state=0)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestRegressor(criterion='mse', max_depth=8, min_samples_leaf=10,\n",
       "                      n_estimators=30, random_state=0)"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model1 = RandomForestRegressor(n_estimators=30,criterion='mse',max_depth=8,min_samples_leaf=10, random_state=0)\n",
    "model1.fit(X_train[:500000], y_train[:500000])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "477e9d4b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "116.79980342037783\n",
      "10.80739577420841\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import mean_squared_error\n",
    "prediction = model1.predict(X_test)\n",
    "mse = mean_squared_error(y_test, prediction)\n",
    "rmse = mse**.5\n",
    "print(mse)\n",
    "print(rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "5736904e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-8.18703265, -8.18703265, -8.18703265, ..., 20.23789559,\n",
       "       -8.18703265, 20.23789559])"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "80a465f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_train_pred_1 = model1.predict(X_train)\n",
    "y_test_pred_1 = model1.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "e0951304",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "explained_variance:  0.9212\n",
      "r2:  0.9212\n",
      "MAE:  7.6649\n",
      "MSE:  119.2321\n",
      "RMSE:  10.9193\n"
     ]
    }
   ],
   "source": [
    "regression_results(y_train,y_train_pred_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "deffc788",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "explained_variance:  0.9236\n",
      "r2:  0.9236\n",
      "MAE:  7.6614\n",
      "MSE:  116.7998\n",
      "RMSE:  10.8074\n"
     ]
    }
   ],
   "source": [
    "regression_results(y_test, y_test_pred_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "129be49a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-87.0"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "5b913be4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1971.0"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "id": "3c7f3a29",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-15.138303280605752"
      ]
     },
     "execution_count": 187,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test_pred_1.min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "8c86d815",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1140.5783714688257"
      ]
     },
     "execution_count": 188,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test_pred_1.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "id": "886f1760",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "On branch master\n",
      "\n",
      "No commits yet\n",
      "\n",
      "Untracked files:\n",
      "  (use \"git add <file>...\" to include in what will be committed)\n",
      "\t.idea/\n",
      "\t.ipynb_checkpoints/\n",
      "\tKopia notatnika Knn-and-SVM.ipynb\n",
      "\tSDA_ML_Regression_ANSWERS.ipynb\n",
      "\tSDA_projekt_regresja.ipynb\n",
      "\tUntitled.ipynb\n",
      "\tUntitled1.ipynb\n",
      "\tdata/\n",
      "\tklasyfikacja.ipynb\n",
      "\tprojekt_klasyfikacja.ipynb\n",
      "\tprojekt_koncowy.ipynb\n",
      "\tprojekt_koncowy_ostat\n",
      "\n",
      "nothing added to commit but untracked files present (use \"git add\" to track)\n"
     ]
    }
   ],
   "source": [
    "!git status"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "id": "8b128fc3",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "warning: LF will be replaced by CRLF in projekt_koncowy_ostat.\n",
      "The file will have its original line endings in your working directory\n"
     ]
    }
   ],
   "source": [
    "!git add projekt_koncowy_ostat\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "id": "fefd1269",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Author identity unknown\n",
      "\n",
      "*** Please tell me who you are.\n",
      "\n",
      "Run\n",
      "\n",
      "  git config --global user.email \"you@example.com\"\n",
      "  git config --global user.name \"Your Name\"\n",
      "\n",
      "to set your account's default identity.\n",
      "Omit --global to set the identity only in this repository.\n",
      "\n",
      "fatal: unable to auto-detect email address (got 'dorot@DESKTOP-GS06KCR.(none)')\n"
     ]
    }
   ],
   "source": [
    "!git commit -m 'projekt_koncowy_SDA_regresja'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "id": "f58616ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "!git config --global user.email \"dorota.wojcicka2@wp.pl\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "id": "16a424c1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[master (root-commit) 91d27c8] 'projekt_koncowy_SDA_regresja'\n",
      " 1 file changed, 1617 insertions(+)\n",
      " create mode 100644 projekt_koncowy_ostat\n"
     ]
    }
   ],
   "source": [
    "!git commit -m 'projekt_koncowy_SDA_regresja'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "id": "ef4dd506",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "error: src refspec parable1648 does not match any\n",
      "error: src refspec kurwamac1648 does not match any\n",
      "error: failed to push some refs to 'origin'\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "593370e5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
